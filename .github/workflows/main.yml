name: Build and Release

# Define the environment variable for the app name
env:
  APP_NAME: ADB-Tools

# Trigger the workflow on push events to the main branch
on:
  push:
    branches:
      - main

jobs:
  build-windows:
    name: Build Windows Executable
    runs-on: windows-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Set up Python 3.12.8
      - name: Set up Python 3.12.8
        uses: actions/setup-python@v4
        with:
          python-version: '3.12.8'

      # Step 3: Install dependencies
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller  # Explicitly install PyInstaller

      # Step 4: Build Executable with PyInstaller
      - name: Build Executable
        run: |
          pyinstaller --onefile --windowed --add-data "resources;resources" --icon=./assets/icon.ico --name "${{ env.APP_NAME }}" main.py

      # Step 5: Upload Windows Executable as Artifact
      - name: Upload Windows Executable
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.APP_NAME }}-windows
          path: ./dist/${{ env.APP_NAME }}.exe

  release:
    name: Create GitHub Release
    needs: [build-windows]
    runs-on: ubuntu-latest

    steps:
      # Step 1: Download Windows Executable Artifact
      - name: Download Windows Executable
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.APP_NAME }}-windows
          path: ./windows

      # Step 2: Create Git Tag
      - name: Create Git Tag
        id: create_tag
        shell: bash
        run: |
          # Generate a tag name using the short commit SHA
          TAG_NAME="build-${GITHUB_SHA::7}"
          echo "TAG_NAME=$TAG_NAME" >> $GITHUB_ENV

      # Step 3: Create GitHub Release
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.TAG_NAME }}
          release_name: "Build ${{ env.TAG_NAME }}"
          draft: false
          prerelease: false

      # Step 4: Upload Windows Executable to Release
      - name: Upload Windows Executable to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./windows/${{ env.APP_NAME }}.exe
          asset_name: ${{ env.APP_NAME }}-windows.exe
          asset_content_type: application/octet-stream
